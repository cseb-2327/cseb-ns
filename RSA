import java.math.BigInteger;
import java.util.Scanner;
import java.util.Random;

public class RSA {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Random rand = new Random();

        // Step 1: Generate two small prime numbers (for demonstration)
        BigInteger p = BigInteger.probablePrime(8, rand); // 8-bit prime
        BigInteger q = BigInteger.probablePrime(8, rand);
        BigInteger n = p.multiply(q);                      // modulus
        BigInteger phi = (p.subtract(BigInteger.ONE)).multiply(q.subtract(BigInteger.ONE));

        // Step 2: Choose public exponent e
        BigInteger e = BigInteger.valueOf(17); // common choice
        while (!phi.gcd(e).equals(BigInteger.ONE)) {
            e = e.add(BigInteger.valueOf(2));
        }

        // Step 3: Calculate private exponent d
        BigInteger d = e.modInverse(phi);

        // Display keys
        System.out.println("Public Key (e,n): (" + e + ", " + n + ")");
        System.out.println("Private Key (d,n): (" + d + ", " + n + ")");

        // Step 4: Input message
        System.out.print("Enter the message (number): ");
        BigInteger message = new BigInteger(sc.nextLine());

        // Step 5: Encryption
        BigInteger cipher = message.modPow(e, n);
        System.out.println("Encrypted: " + cipher);

        // Step 6: Decryption
        BigInteger decrypted = cipher.modPow(d, n);
        System.out.println("Decrypted: " + decrypted);

        sc.close();
    }
}
